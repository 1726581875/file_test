2 原码
我们知道，1个字节转化为整型数字是-128～127。

正数的原码不变，就是它本身，比如:
34的原码：00100010（使用一个字节存储）
负数在最高位用1表示，比如：
-34的原码：10100010（使用一个字节存储）
3 反码
正数的反码跟原码一样，比如：
34的反码：00100010（使用一个字节存储）
负数的反码是在负数原码基础上，按位取反（符号为不变），比如：
-34的反码：11011101（使用一个字节存储）
4 补码
在计算中对整型的存储是以补码进行存储的（因为正数的补码就是原码）。

正数的补码跟原码一样，比如：
34的补码：00100010（使用一个字节存储）
负数的补码是负数的反码+1，比如：
-34的补码：11011110（使用一个字节存储）
那么计算机存储为什么以反码存储呢？

因为使用原码、反码计算可能不准确，使用反码计算结果是准确的。例如对34-34计算结果

使用原码计算
00100010

+ 10100010

= 11000100（结果是-68，显然根据原码计算结果是不对的）

使用反码计算
00100010

+ 11011101

= 1111111（计算结果是反码，转为原码结果是10000000，转为整型结果就是-0，显然根据反码计算结果也是不对的）

使用补码计算
00100010

+ 11011110

=100000000（我们这里使用1个字节存储，所以最高为（第九位）丢弃，结果是00000000，转为整型结果就是0，显然根据反码计算结果是对的）